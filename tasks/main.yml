- name: "Query MDM Cluster to get Ids"
  uri:
    url: "https://{{ groups.gateway[0] }}:{{ vxflex_gateway_https_port }}\
    /api/instances/System/queryMdmCluster"
    return_content: yes
    method: POST
    body: {}
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
      - 428
  register: initial_output
  run_once: True
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- debug:
    var: initial_output
  tags:
    - [ never, debug ]

- name: "Slurp remote vxflex cfg.txt file"
  fetch:
    src: /opt/emc/scaleio/mdm/cfg/conf.txt
    dest: "/tmp/"
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- name: "Determine if node is a manager"
  set_fact:
    role: "{% if item | bool %}Manager{% else %}TieBreaker{% endif %}"
  when: "'mdm' in group_names"
  with_ini:
    - "actor_role_is_manager type=properties file=/tmp/{{ inventory_hostname }}/opt/emc/scaleio/mdm/cfg/conf.txt"
  tags:
    - create_cluster

- name: Add node to specified group
  add_host:
    name: "{{ hostvars[item]['ansible_facts']['default_ipv4']['address'] }}"
    groups: "{{ hostvars[item]['role'] }}"
  with_items: "{{ groups.mdm }}"
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- name: Print out Managers group membership
  debug:
    var: groups.Manager
  run_once: True
  tags:
    - [ never, debug ]

- name: Print out TieBreakers group membership
  debug:
    var: groups.TieBreaker
  run_once: True
  tags:
    - [ never, debug ]

- name: "Find MDM Private Ip's"
  set_fact:
    mdm_private_ip: "{{ ansible_facts['all_ipv4_addresses'] | \
    ipaddr( vxflex_mdm_cidr ) }}"
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- name: "Find MDM Public Ip's"
  set_fact:
    mdm_public_ip: "{{ ansible_facts['all_ipv4_addresses'] | \
    ipaddr( vxflex_mdm_public_cidr ) }}"
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- debug:
    var: mdm_private_ip
  tags:
    - [ never, debug ]

- debug:
    var: mdm_public_ip
  tags:
    - [ never, debug ]

- name: "Add MDM Master"
  shell: 'scli --create_mdm_cluster \
  --master_mdm_ip {{ mdm_private_ip | join(",") }} \
  --master_mdm_management_ip {{ mdm_public_ip | join(",") }} \
  --master_mdm_name {{ ansible_facts["nodename"] }} \
  --cluster_virtual_ip {{ vxflex_vip_ip }} \
  --master_mdm_virtual_ip_interface {{ ansible_default_ipv4.interface }} \
  --accept_license \
  --approve_certificate'
  register: results
  when:
    - "initial_output.status == 428"
    - "inventory_hostname == groups.Manager[0]"
  tags:
    - create_cluster

- name: "Query MDM Cluster to get Ids"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/instances/System/queryMdmCluster"
    return_content: yes
    method: POST
    body: {}
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
      - 428
  register: master_output
  run_once: True
  when: "'mdm' in group_names"
  tags:
    - create_cluster

- name: "Gather standby mdm nodes"
  set_fact:
    standbyMDMs: "{{ master_output.json | json_query(query) }}"
  vars:
    query: "standbyMDMs[].name"
  when:
    - master_output.json.standbyMDMs is defined
  tags:
    - create_cluster

- name: Print out current standbyMDMs
  debug:
    var: standbyMDMs
  run_once: True
  tags:
    - [ never, debug ]

- name: "Gather master mdm nodes"
  set_fact:
    master: "{{ (master_output.json | json_query(query)).split() }}"
  vars:
    query: "master.name"
  when:
    - master_output.json.master is defined
  tags:
    - create_cluster

- name: Print out current master
  debug:
    var: master
  run_once: True
  tags:
    - [ never, debug ]

- name: "Gather tieBreaker mdm nodes"
  set_fact:
    tieBreakers: "{{ master_output.json | json_query(query) }}"
  vars:
    query: "tieBreakers[].name"
  when:
    - master_output.json.tieBreakers is defined
  tags:
    - create_cluster

- name: Print out current tieBreakers
  debug:
    var: tieBreakers
  run_once: True
  tags:
    - [ never, debug ]

- name: "Gather slave mdm nodes"
  set_fact:
    slaves: "{{ master_output.json | json_query(query) }}"
  vars:
    query: "slaves[].name"
  when:
    - master_output.json.slaves is defined
  tags:
    - create_cluster

- name: Print out current slaves
  debug:
    var: slaves
  run_once: True
  tags:
    - [ never, debug ]

- name: "Get ScaleIO token for Auth"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/login"
    return_content: yes
    user: "{{ vxflex_gateway_username }}"
    password: "{{ current_password }}"
    force_basic_auth: yes
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
      - 401
  register: basic_auth
  changed_when: basic_auth.status == 200
  tags:
    - create_cluster
    - change_password

- name: "Change Admin Password"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/instances/User/action/setPassword"
    method: POST
    user: "{{ vxflex_gateway_username }}"
    password: "{{ basic_auth.json }}"
    body: {"oldPassword":"{{ current_password }}",
    "newPassword":"{{ vxflex_gateway_pw }}"}
    force_basic_auth: yes
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  when: basic_auth.status == 200
  changed_when: basic_auth.status == 200
  run_once: True
  tags:
    - create_cluster
    - change_password

- name: "Get ScaleIO token for Auth"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/login"
    return_content: yes
    user: "{{ vxflex_gateway_username }}"
    password: "{{ vxflex_gateway_pw }}"
    force_basic_auth: yes
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  register: auth
  run_once: True
  tags:
    - create_cluster

- name: "Add Standby MDM to cluster"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/instances/System/action/addStandbyMdm"
    method: POST
    user: "{{ vxflex_gateway_username }}"
    password: "{{ auth.json }}"
    body: {"ips": "{{ mdm_private_ip }}",
    "managementIps":"{{ mdm_public_ip }}",
    "virtIpIntfs":["{{ ansible_default_ipv4.interface }}"],
    "name":"{{ ansible_facts['nodename'] }}",
    "role":"{{ role }}"}
    force_basic_auth: yes
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  register: mdm_results
  when:
    - "'mdm' in group_names"
    - not ansible_facts.nodename in tieBreakers
    - not ansible_facts.nodename in master
    - not ansible_facts.nodename in slaves
    - not ansible_facts.nodename in standbyMDMs
  changed_when: mdm_results.status == 200
  tags:
    - create_cluster

- name: "Display standby add results"
  debug:
    var: mdm_results
  tags:
    - [ never, debug ]

- name: "Query MDM Cluster to get Ids"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/instances/System/queryMdmCluster"
    return_content: yes
    method: POST
    body: {}
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  register: cluster_output
  run_once: True
  changed_when: cluster_output.status == 200
  tags:
    - create_cluster

- name: "MDM Cluster Ids output"
  debug:
    var: cluster_output
  tags:
    - [ never, debug ]

- name: "Setting current cluster mode fact"
  set_fact:
    current_cluster_mode: "{{ cluster_output.json.clusterMode }}"
  run_once: True
  tags:
    - create_cluster

- name: Print current cluster mode
  debug:
    var: current_cluster_mode
  run_once: True
  tags:
    - [ never, debug ]

- name: "Count how many managers"
  set_fact:
    manager_count: "{{ groups.Manager | length }}"
  run_once: True
  tags:
    - create_cluster

- name: Print manager_count
  debug:
    var: manager_count
  run_once: True
  tags:
    - [ never, debug ]

- name: "Count how many tiebreakers"
  set_fact:
    tiebreaker_count: "{{ groups.TieBreaker | length }}"
  run_once: True
  tags:
    - create_cluster

- name: Print tiebreaker_count
  debug:
    var: tiebreaker_count
  run_once: True
  tags:
    - [ never, debug ]

- name: "determine cluster mode"
  set_fact:
    target_cluster_mode: "OneNode"
    required_slaves: 0
    required_tiebreakers: 0
  run_once: True
  when:
    - groups.mdm | length >= 1
    - groups.Manager | length >= 1
  tags:
    - create_cluster

- name: "determine cluster mode"
  set_fact:
    target_cluster_mode: "ThreeNodes"
    required_slaves: 1
    required_tiebreakers: 1
  run_once: True
  when:
    - groups.mdm | length >= 3
    - groups.Manager | length >= 2
    - groups.TieBreaker | length >= 1
  tags:
    - create_cluster

- name: "determine cluster mode"
  set_fact:
    target_cluster_mode: "FiveNodes"
    required_slaves: "{% if current_cluster_mode == 'OneNode' %}2{% elif current_cluster_mode == 'ThreeNodes' %}1{% else %}0{% endif %}"
    required_tiebreakers: "{% if current_cluster_mode == 'OneNode' %}2{% elif current_cluster_mode == 'ThreeNodes' %}1{% else %}0{% endif %}"
  run_once: True
  when:
    - groups.mdm | length >= 5
    - groups.Manager | length >= 3
    - groups.TieBreaker | length >= 2
  tags:
    - create_cluster

- name: Print target cluster mode
  debug:
    var: target_cluster_mode
  run_once: True
  tags:
    - [ never, debug ]

- name: "build add slave list"
  set_fact:
    add_slave_list: "{{ (groups.Manager | difference(master) | difference(slaves))[:required_slaves] | default([]) }}"
    add_tiebreaker_list: "{{ (groups.TieBreaker | difference(tieBreakers))[:required_TieBreaker] | default([]) }}"

- name: Print slaves to add
  debug:
    var: add_slave_list
  run_once: True
  tags:
    - [ never, debug ]

- name: Print tiebreakers to add
  debug:
    var: add_tiebreaker_list
  run_once: True
  tags:
    - [ never, debug ]

- name: "Change to 3 node cluster"
  uri:
    url: "https://{{ vxflex_gateway_ip }}:{{ vxflex_gateway_https_port }}\
    /api/instances/System/action/switchClusterMode"
    method: POST
    user: "{{ vxflex_gateway_username }}"
    password: "{{ auth.json }}"
    body: {
    "mode":"{{ target_cluster_mode }}",
    "addSlaveMdmIdList":"{{ mdmManager }}",
    "addTBIdList":"{{ mdmTiebreaker }}"
    }
    force_basic_auth: yes
    body_format: json
    validate_certs: False
    status_code:
      - 200
      - 201
      - 202
  run_once: True
  register: final_output
  changed_when: "cluster_output.status == 200"
  when:
    - not (current_cluster_mode == 'FiveNodes')
    - not (current_cluster_mode == target_cluster_mode)
    - groups.Manager | length > 0
  tags:
    - create_cluster
